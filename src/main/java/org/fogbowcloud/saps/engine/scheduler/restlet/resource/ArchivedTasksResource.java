package org.fogbowcloud.saps.engine.scheduler.restlet.resource;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.log4j.Logger;
import org.fogbowcloud.saps.engine.core.dispatcher.SubmissionParameters;
import org.fogbowcloud.saps.engine.core.model.ImageTask;
import org.fogbowcloud.saps.engine.core.pojo.ImageTaskFileList;
import org.fogbowcloud.saps.engine.core.service.ProcessedImagesService;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.restlet.data.Form;
import org.restlet.data.Header;
import org.restlet.data.MediaType;
import org.restlet.representation.Representation;
import org.restlet.representation.StringRepresentation;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.util.Series;

/**
 * Responsable for retrieve information about already processed - archived - tasks.
 */
public class ArchivedTasksResource extends BaseResource {

	private static final Logger LOGGER = Logger.getLogger(ArchivedTasksResource.class);

	private static final String REQUEST_ATTR_PROCESSED_IMAGES = "images_id[]";

	public ArchivedTasksResource() {
		super();
	}

	/**
	 * Returns all processed tasks that matches the execution parameters passed
	 * in {@code representation}.
	 *
	 * @param representation Entity containing execution parameters.
	 * @return List of processed tasks.
	 */
	@Post
	public Representation getProcessedTasksInInterval(Representation representation) {
		Form form = new Form(representation);
		SubmissionParameters submissionParameters = extractSubmissionParameters(form);

		String log = "Recovering processed tasks with settings:\n" +
				"\tLower Left: " + submissionParameters.getLowerLeftLatitude() + ", " + submissionParameters.getLowerLeftLongitude() + "\n" +
				"\tUpper Right: " + submissionParameters.getUpperRightLatitude() + ", " + submissionParameters.getUpperRightLongitude() + "\n" +
				"\tInterval: " + submissionParameters.getInitDate() + " - " + submissionParameters.getEndDate() + "\n" +
				"\tGathering: " + submissionParameters.getInputGathering() + "\n" +
				"\tPreprocessing: " + submissionParameters.getInputPreprocessing() + "\n" +
				"\tAlgorithm: " + submissionParameters.getAlgorithmExecution() + "\n";
		LOGGER.info(log);

		List<ImageTask> tasks = application.searchProcessedTasks(submissionParameters);
		JSONObject resObj = buildJsonResponseFromTaskList(tasks);
		return new StringRepresentation(resObj.toString(), MediaType.APPLICATION_JSON);
	}

    /**
     * Returns the files generated by execution of each {@link ImageTask} that
     * had its ID specified.
     */
	@SuppressWarnings("unchecked")
	@Get
	public Representation getProcessedImageTasksFiles() {
		Series<Header> series = (Series<Header>) getRequestAttributes()
				.get("org.restlet.http.headers");

		String[] imageTasksIds = series.getValuesArray(REQUEST_ATTR_PROCESSED_IMAGES, true);
		LOGGER.info("Recovering files from processed ImageTasks from list of IDs: "
                + Arrays.toString(imageTasksIds));

        JSONArray resultJSONArray = new JSONArray();
        try {
            List<ImageTask> imageTasks = application.getImageTasks(imageTasksIds);
            List<ImageTaskFileList> imageTaskFileLists = imageTasks.stream()
                    .map(imageTask -> ProcessedImagesService.generateImageTaskFiles(
                            application.getProperties(),
                            imageTask))
                    .collect(Collectors.toList());
            for (ImageTaskFileList imageTaskFileList: imageTaskFileLists) {
                resultJSONArray.put(imageTaskFileList.toJSON());
            }
        } catch (SQLException | JSONException e) {
            LOGGER.error("Error while returning files of processed ImageTasks", e);
        }
        return new StringRepresentation(resultJSONArray.toString(), MediaType.APPLICATION_JSON);
    }

}